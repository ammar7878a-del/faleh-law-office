#!/usr/bin/env python3
"""
ุณูุฑูุจุช ูุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุฎุงุฑุฌูุฉ
"""

import os
import sys
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

def test_database_connection():
    """ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช"""
    
    print("๐ ูุญุต ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช...")
    
    # ุงูุญุตูู ุนูู ุฑุงุจุท ูุงุนุฏุฉ ุงูุจูุงูุงุช ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
    database_url = os.environ.get('DATABASE_URL')
    
    if not database_url:
        print("โ ูู ูุชู ุงูุนุซูุฑ ุนูู ูุชุบูุฑ DATABASE_URL")
        print("๐ก ูุฌุจ ุฅุถุงูุฉ ุฑุงุจุท ูุงุนุฏุฉ ุงูุจูุงูุงุช ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ")
        print("๐ ุฑุงุฌุน ููู DATABASE_SETUP_GUIDE.md ููุชุนูููุงุช")
        return False
    
    print(f"โ ุชู ุงูุนุซูุฑ ุนูู DATABASE_URL")
    
    # ุฅุฎูุงุก ูููุฉ ุงููุฑูุฑ ูู ุงูุนุฑุถ
    safe_url = database_url
    if '@' in safe_url and ':' in safe_url:
        parts = safe_url.split('@')
        if len(parts) == 2:
            user_part = parts[0].split('://')[-1]
            if ':' in user_part:
                user, password = user_part.split(':', 1)
                safe_url = safe_url.replace(f':{password}@', ':****@')
    
    print(f"๐ ุฑุงุจุท ูุงุนุฏุฉ ุงูุจูุงูุงุช: {safe_url}")
    
    # ุฅุตูุงุญ ุฑุงุจุท PostgreSQL ุฅุฐุง ูุฒู ุงูุฃูุฑ
    if database_url.startswith('postgres://'):
        database_url = database_url.replace('postgres://', 'postgresql://', 1)
        print("๐ง ุชู ุฅุตูุงุญ ุฑุงุจุท PostgreSQL")
    
    try:
        print("๐ ูุญุงููุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...")
        
        # ุฅูุดุงุก ูุญุฑู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        engine = create_engine(
            database_url,
            pool_pre_ping=True,
            pool_recycle=300,
            pool_timeout=20,
            max_overflow=0,
            connect_args={'sslmode': 'require'} if 'postgresql' in database_url else {}
        )
        
        # ุงุฎุชุจุงุฑ ุงูุงุชุตุงู
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 1 as test"))
            test_value = result.fetchone()[0]
            
            if test_value == 1:
                print("โ ูุฌุญ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช!")
                
                # ุงุฎุชุจุงุฑ ุฅุถุงูู: ุงูุญุตูู ุนูู ูุนูููุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
                if 'postgresql' in database_url:
                    version_result = connection.execute(text("SELECT version()"))
                    version = version_result.fetchone()[0]
                    print(f"๐ ููุน ูุงุนุฏุฉ ุงูุจูุงูุงุช: PostgreSQL")
                    print(f"๐ ุงูุฅุตุฏุงุฑ: {version.split(',')[0]}")
                    
                    # ูุญุต ุงูุฌุฏุงูู ุงูููุฌูุฏุฉ
                    tables_result = connection.execute(text("""
                        SELECT table_name 
                        FROM information_schema.tables 
                        WHERE table_schema = 'public'
                    """))
                    tables = [row[0] for row in tables_result.fetchall()]
                    
                    if tables:
                        print(f"๐ ุงูุฌุฏุงูู ุงูููุฌูุฏุฉ ({len(tables)}): {', '.join(tables)}")
                    else:
                        print("๐ ูุง ุชูุฌุฏ ุฌุฏุงูู (ูุงุนุฏุฉ ุจูุงูุงุช ุฌุฏูุฏุฉ)")
                
                return True
                
    except SQLAlchemyError as e:
        print(f"โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:")
        print(f"   {str(e)}")
        
        # ูุตุงุฆุญ ูุญู ุงููุดุงูู ุงูุดุงุฆุนุฉ
        error_str = str(e).lower()
        if 'password authentication failed' in error_str:
            print("๐ก ูุตูุญุฉ: ุชุฃูุฏ ูู ุตุญุฉ ูููุฉ ุงููุฑูุฑ ูู ุฑุงุจุท ูุงุนุฏุฉ ุงูุจูุงูุงุช")
        elif 'could not connect to server' in error_str:
            print("๐ก ูุตูุญุฉ: ุชุฃูุฏ ูู ุตุญุฉ ุนููุงู ุงูุฎุงุฏู ูุงููููุฐ")
        elif 'database' in error_str and 'does not exist' in error_str:
            print("๐ก ูุตูุญุฉ: ุชุฃูุฏ ูู ูุฌูุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช")
        elif 'ssl' in error_str:
            print("๐ก ูุตูุญุฉ: ูุดููุฉ ูู ุดูุงุฏุฉ SSLุ ุชุฃูุฏ ูู ุฅุนุฏุงุฏุงุช ุงูุงุชุตุงู")
        
        return False
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ุบูุฑ ูุชููุน: {str(e)}")
        return False

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    print("=" * 50)
    print("๐งช ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช")
    print("=" * 50)
    
    success = test_database_connection()
    
    print("=" * 50)
    if success:
        print("๐ ุงูุงุฎุชุจุงุฑ ูุฌุญ! ูุงุนุฏุฉ ุงูุจูุงูุงุช ุฌุงูุฒุฉ ููุงุณุชุฎุฏุงู")
        print("โ ุงูุจูุงูุงุช ุณุชููู ูุญููุธุฉ ุฏุงุฆูุงู")
        print("๐ ููููู ุงูุขู ุชุดุบูู ุงูุชุทุจูู ุจุฃูุงู")
    else:
        print("โ ูุดู ุงูุงุฎุชุจุงุฑ! ูุฌุจ ุฅุตูุงุญ ุงููุดููุฉ ุฃููุงู")
        print("๐ ุฑุงุฌุน ููู DATABASE_SETUP_GUIDE.md ูููุณุงุนุฏุฉ")
        print("๐ง ุชุฃูุฏ ูู ุฅุนุฏุงุฏ ูุชุบูุฑ DATABASE_URL ุจุดูู ุตุญูุญ")
    print("=" * 50)
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
